// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  password String
  isAdmin  Boolean   @default(false)
  products Product[]
  orders   Order[]   // Relação com a entidade Order
}


model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  userId      Int?
  user        User?       @relation(fields: [userId], references: [id])
  categoryId  Int?
  category    Category?   @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[] // Relação com a entidade OrderItem
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  description String?
  products Product[]
}

model Order {
  id          Int       @id @default(autoincrement())
  totalAmount Float?
  createdAt   DateTime?  @default(now())
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  paymentStatus PaymentStatus?  @default(PENDING)
  paymentMethod PaymentMethod
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  price     Float
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  PIX
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
